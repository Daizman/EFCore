// <auto-generated />
using System;
using EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Migrations
{
    [DbContext(typeof(EFCoreContext))]
    [Migration("20230608084140_updateModels")]
    partial class updateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublisher");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenresId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("EFCore.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbd1ecea-ec9d-4172-a825-feae7e42422d"),
                            BirthDate = new DateOnly(1799, 6, 6),
                            Fio = "Пушкин А.С."
                        },
                        new
                        {
                            Id = new Guid("99db2a14-f4a9-42c1-a2d1-266a0f0d02b9"),
                            BirthDate = new DateOnly(1821, 10, 30),
                            Fio = "Достоевский Ф.М."
                        },
                        new
                        {
                            Id = new Guid("6e677623-4745-4f4e-9955-501d95aac980"),
                            BirthDate = new DateOnly(1828, 8, 28),
                            Fio = "Толстой Л.Н."
                        },
                        new
                        {
                            Id = new Guid("6fcd3229-b28e-4f8d-a4c3-56502e36a0a4"),
                            BirthDate = new DateOnly(1860, 1, 17),
                            Fio = "Чехов А.П."
                        });
                });

            modelBuilder.Entity("EFCore.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFCore.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ужасы"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Комедия"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Триллер"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Драма"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Романтика"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Фэнтези"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Приключения"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Роман"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Рассказ"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Повесть"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Психология"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Стихи"
                        });
                });

            modelBuilder.Entity("EFCore.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("707c8cab-6229-4f03-8b45-822e28da5b26"),
                            Name = "Pinguin"
                        },
                        new
                        {
                            Id = new Guid("e7c40e9a-5b14-49ec-851f-8d38bf232336"),
                            Name = "Harper Collins"
                        },
                        new
                        {
                            Id = new Guid("69935fee-dbe4-4ab1-916d-06d3d238f240"),
                            Name = "Macmillan"
                        });
                });

            modelBuilder.Entity("EFCore.Models.Journal", b =>
                {
                    b.HasBaseType("EFCore.Models.Book");

                    b.Property<int>("Edition")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Journal");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("EFCore.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.HasOne("EFCore.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("EFCore.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Models.Book", b =>
                {
                    b.HasOne("EFCore.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EFCore.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
